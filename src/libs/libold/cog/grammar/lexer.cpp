#line 2 "lexer.cpp"

#line 4 "lexer.cpp"

#define  YY_INT_ALIGNED short int

/* A lexical scanner generated by flex */

#define FLEX_SCANNER
#define YY_FLEX_MAJOR_VERSION 2
#define YY_FLEX_MINOR_VERSION 5
#define YY_FLEX_SUBMINOR_VERSION 39
#if YY_FLEX_SUBMINOR_VERSION > 0
#define FLEX_BETA
#endif

/* First, we deal with  platform-specific or compiler-specific issues. */

/* begin standard C headers. */
#include <stdio.h>
#include <string.h>
#include <errno.h>
#include <stdlib.h>

/* end standard C headers. */

/* flex integer type definitions */

#ifndef FLEXINT_H
#define FLEXINT_H

/* C99 systems have <inttypes.h>. Non-C99 systems may or may not. */

#if defined (__STDC_VERSION__) && __STDC_VERSION__ >= 199901L

/* C99 says to define __STDC_LIMIT_MACROS before including stdint.h,
 * if you want the limit (max/min) macros for int types. 
 */
#ifndef __STDC_LIMIT_MACROS
#define __STDC_LIMIT_MACROS 1
#endif

#include <inttypes.h>
typedef int8_t flex_int8_t;
typedef uint8_t flex_uint8_t;
typedef int16_t flex_int16_t;
typedef uint16_t flex_uint16_t;
typedef int32_t flex_int32_t;
typedef uint32_t flex_uint32_t;
#else
typedef signed char flex_int8_t;
typedef short int flex_int16_t;
typedef int flex_int32_t;
typedef unsigned char flex_uint8_t; 
typedef unsigned short int flex_uint16_t;
typedef unsigned int flex_uint32_t;

/* Limits of integral types. */
#ifndef INT8_MIN
#define INT8_MIN               (-128)
#endif
#ifndef INT16_MIN
#define INT16_MIN              (-32767-1)
#endif
#ifndef INT32_MIN
#define INT32_MIN              (-2147483647-1)
#endif
#ifndef INT8_MAX
#define INT8_MAX               (127)
#endif
#ifndef INT16_MAX
#define INT16_MAX              (32767)
#endif
#ifndef INT32_MAX
#define INT32_MAX              (2147483647)
#endif
#ifndef UINT8_MAX
#define UINT8_MAX              (255U)
#endif
#ifndef UINT16_MAX
#define UINT16_MAX             (65535U)
#endif
#ifndef UINT32_MAX
#define UINT32_MAX             (4294967295U)
#endif

#endif /* ! C99 */

#endif /* ! FLEXINT_H */

#ifdef __cplusplus

/* The "const" storage-class-modifier is valid. */
#define YY_USE_CONST

#else	/* ! __cplusplus */

/* C99 requires __STDC__ to be defined as 1. */
#if defined (__STDC__)

#define YY_USE_CONST

#endif	/* defined (__STDC__) */
#endif	/* ! __cplusplus */

#ifdef YY_USE_CONST
#define yyconst const
#else
#define yyconst
#endif

/* Returned upon end-of-file. */
#define YY_NULL 0

/* Promotes a possibly negative, possibly signed char to an unsigned
 * integer for use as an array index.  If the signed char is negative,
 * we want to instead treat it as an 8-bit unsigned char, hence the
 * double cast.
 */
#define YY_SC_TO_UI(c) ((unsigned int) (unsigned char) c)

/* An opaque pointer. */
#ifndef YY_TYPEDEF_YY_SCANNER_T
#define YY_TYPEDEF_YY_SCANNER_T
typedef void* yyscan_t;
#endif

/* For convenience, these vars (plus the bison vars far below)
   are macros in the reentrant scanner. */
#define yyin yyg->yyin_r
#define yyout yyg->yyout_r
#define yyextra yyg->yyextra_r
#define yyleng yyg->yyleng_r
#define yytext yyg->yytext_r
#define yylineno (YY_CURRENT_BUFFER_LVALUE->yy_bs_lineno)
#define yycolumn (YY_CURRENT_BUFFER_LVALUE->yy_bs_column)
#define yy_flex_debug yyg->yy_flex_debug_r

/* Enter a start condition.  This macro really ought to take a parameter,
 * but we do it the disgusting crufty way forced on us by the ()-less
 * definition of BEGIN.
 */
#define BEGIN yyg->yy_start = 1 + 2 *

/* Translate the current start state into a value that can be later handed
 * to BEGIN to return to the state.  The YYSTATE alias is for lex
 * compatibility.
 */
#define YY_START ((yyg->yy_start - 1) / 2)
#define YYSTATE YY_START

/* Action number for EOF rule of a given start state. */
#define YY_STATE_EOF(state) (YY_END_OF_BUFFER + state + 1)

/* Special action meaning "start processing a new file". */
#define YY_NEW_FILE gra_restart(yyin ,yyscanner )

#define YY_END_OF_BUFFER_CHAR 0

/* Size of default input buffer. */
#ifndef YY_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k.
 * Moreover, YY_BUF_SIZE is 2*YY_READ_BUF_SIZE in the general case.
 * Ditto for the __ia64__ case accordingly.
 */
#define YY_BUF_SIZE 32768
#else
#define YY_BUF_SIZE 16384
#endif /* __ia64__ */
#endif

/* The state buf must be large enough to hold one state per character in the main buffer.
 */
#define YY_STATE_BUF_SIZE   ((YY_BUF_SIZE + 2) * sizeof(yy_state_type))

#ifndef YY_TYPEDEF_YY_BUFFER_STATE
#define YY_TYPEDEF_YY_BUFFER_STATE
typedef struct yy_buffer_state *YY_BUFFER_STATE;
#endif

#ifndef YY_TYPEDEF_YY_SIZE_T
#define YY_TYPEDEF_YY_SIZE_T
typedef size_t yy_size_t;
#endif

#define EOB_ACT_CONTINUE_SCAN 0
#define EOB_ACT_END_OF_FILE 1
#define EOB_ACT_LAST_MATCH 2

    /* Note: We specifically omit the test for yy_rule_can_match_eol because it requires
     *       access to the local variable yy_act. Since yyless() is a macro, it would break
     *       existing scanners that call yyless() from OUTSIDE gra_lex. 
     *       One obvious solution it to make yy_act a global. I tried that, and saw
     *       a 5% performance hit in a non-yylineno scanner, because yy_act is
     *       normally declared as a register variable-- so it is not worth it.
     */
    #define  YY_LESS_LINENO(n) \
            do { \
                int yyl;\
                for ( yyl = n; yyl < yyleng; ++yyl )\
                    if ( yytext[yyl] == '\n' )\
                        --yylineno;\
            }while(0)
    #define YY_LINENO_REWIND_TO(dst) \
            do {\
                const char *p;\
                for ( p = yy_cp-1; p >= (dst); --p)\
                    if ( *p == '\n' )\
                        --yylineno;\
            }while(0)
    
/* Return all but the first "n" matched characters back to the input stream. */
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		*yy_cp = yyg->yy_hold_char; \
		YY_RESTORE_YY_MORE_OFFSET \
		yyg->yy_c_buf_p = yy_cp = yy_bp + yyless_macro_arg - YY_MORE_ADJ; \
		YY_DO_BEFORE_ACTION; /* set up yytext again */ \
		} \
	while ( 0 )

#define unput(c) yyunput( c, yyg->yytext_ptr , yyscanner )

#ifndef YY_STRUCT_YY_BUFFER_STATE
#define YY_STRUCT_YY_BUFFER_STATE
struct yy_buffer_state
	{
	FILE *yy_input_file;

	char *yy_ch_buf;		/* input buffer */
	char *yy_buf_pos;		/* current position in input buffer */

	/* Size of input buffer in bytes, not including room for EOB
	 * characters.
	 */
	yy_size_t yy_buf_size;

	/* Number of characters read into yy_ch_buf, not including EOB
	 * characters.
	 */
	yy_size_t yy_n_chars;

	/* Whether we "own" the buffer - i.e., we know we created it,
	 * and can realloc() it to grow it, and should free() it to
	 * delete it.
	 */
	int yy_is_our_buffer;

	/* Whether this is an "interactive" input source; if so, and
	 * if we're using stdio for input, then we want to use getc()
	 * instead of fread(), to make sure we stop fetching input after
	 * each newline.
	 */
	int yy_is_interactive;

	/* Whether we're considered to be at the beginning of a line.
	 * If so, '^' rules will be active on the next match, otherwise
	 * not.
	 */
	int yy_at_bol;

    int yy_bs_lineno; /**< The line count. */
    int yy_bs_column; /**< The column count. */
    
	/* Whether to try to fill the input buffer when we reach the
	 * end of it.
	 */
	int yy_fill_buffer;

	int yy_buffer_status;

#define YY_BUFFER_NEW 0
#define YY_BUFFER_NORMAL 1
	/* When an EOF's been seen but there's still some text to process
	 * then we mark the buffer as YY_EOF_PENDING, to indicate that we
	 * shouldn't try reading from the input source any more.  We might
	 * still have a bunch of tokens to match, though, because of
	 * possible backing-up.
	 *
	 * When we actually see the EOF, we change the status to "new"
	 * (via gra_restart()), so that the user can continue scanning by
	 * just pointing yyin at a new input file.
	 */
#define YY_BUFFER_EOF_PENDING 2

	};
#endif /* !YY_STRUCT_YY_BUFFER_STATE */

/* We provide macros for accessing buffer states in case in the
 * future we want to put the buffer states in a more general
 * "scanner state".
 *
 * Returns the top of the stack, or NULL.
 */
#define YY_CURRENT_BUFFER ( yyg->yy_buffer_stack \
                          ? yyg->yy_buffer_stack[yyg->yy_buffer_stack_top] \
                          : NULL)

/* Same as previous macro, but useful when we know that the buffer stack is not
 * NULL or when we need an lvalue. For internal use only.
 */
#define YY_CURRENT_BUFFER_LVALUE yyg->yy_buffer_stack[yyg->yy_buffer_stack_top]

void gra_restart (FILE *input_file ,yyscan_t yyscanner );
void gra__switch_to_buffer (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
YY_BUFFER_STATE gra__create_buffer (FILE *file,int size ,yyscan_t yyscanner );
void gra__delete_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void gra__flush_buffer (YY_BUFFER_STATE b ,yyscan_t yyscanner );
void gra_push_buffer_state (YY_BUFFER_STATE new_buffer ,yyscan_t yyscanner );
void gra_pop_buffer_state (yyscan_t yyscanner );

static void gra_ensure_buffer_stack (yyscan_t yyscanner );
static void gra__load_buffer_state (yyscan_t yyscanner );
static void gra__init_buffer (YY_BUFFER_STATE b,FILE *file ,yyscan_t yyscanner );

#define YY_FLUSH_BUFFER gra__flush_buffer(YY_CURRENT_BUFFER ,yyscanner)

YY_BUFFER_STATE gra__scan_buffer (char *base,yy_size_t size ,yyscan_t yyscanner );
YY_BUFFER_STATE gra__scan_string (yyconst char *yy_str ,yyscan_t yyscanner );
YY_BUFFER_STATE gra__scan_bytes (yyconst char *bytes,yy_size_t len ,yyscan_t yyscanner );

void *gra_alloc (yy_size_t ,yyscan_t yyscanner );
void *gra_realloc (void *,yy_size_t ,yyscan_t yyscanner );
void gra_free (void * ,yyscan_t yyscanner );

#define yy_new_buffer gra__create_buffer

#define yy_set_interactive(is_interactive) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){ \
        gra_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            gra__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_is_interactive = is_interactive; \
	}

#define yy_set_bol(at_bol) \
	{ \
	if ( ! YY_CURRENT_BUFFER ){\
        gra_ensure_buffer_stack (yyscanner); \
		YY_CURRENT_BUFFER_LVALUE =    \
            gra__create_buffer(yyin,YY_BUF_SIZE ,yyscanner); \
	} \
	YY_CURRENT_BUFFER_LVALUE->yy_at_bol = at_bol; \
	}

#define YY_AT_BOL() (YY_CURRENT_BUFFER_LVALUE->yy_at_bol)

/* Begin user sect3 */

#define gra_wrap(yyscanner) 1
#define YY_SKIP_YYWRAP

typedef unsigned char YY_CHAR;

typedef int yy_state_type;

#define yytext_ptr yytext_r

static yy_state_type yy_get_previous_state (yyscan_t yyscanner );
static yy_state_type yy_try_NUL_trans (yy_state_type current_state  ,yyscan_t yyscanner);
static int yy_get_next_buffer (yyscan_t yyscanner );
static void yy_fatal_error (yyconst char msg[] ,yyscan_t yyscanner );

/* Done after the current pattern has been matched and before the
 * corresponding action - sets up yytext.
 */
#define YY_DO_BEFORE_ACTION \
	yyg->yytext_ptr = yy_bp; \
	yyleng = (size_t) (yy_cp - yy_bp); \
	yyg->yy_hold_char = *yy_cp; \
	*yy_cp = '\0'; \
	yyg->yy_c_buf_p = yy_cp;

#define YY_NUM_RULES 83
#define YY_END_OF_BUFFER 84
/* This struct is not used in this scanner,
   but its presence is necessary. */
struct yy_trans_info
	{
	flex_int32_t yy_verify;
	flex_int32_t yy_nxt;
	};
static yyconst flex_int16_t yy_accept[203] =
    {   0,
        0,    0,    0,    0,    0,    0,    0,    0,    0,    0,
        0,    0,    0,    0,    0,    0,    0,    0,   84,   82,
       81,   81,   75,   82,   77,   82,   82,   82,   74,   74,
       61,   30,   27,   60,   62,   55,   68,   69,   58,   56,
       54,   57,   82,   59,   42,   42,   52,   53,   70,   65,
       71,   40,   40,   40,   40,   40,   40,   40,   40,   40,
       40,   72,   73,   64,   66,   63,   67,    8,    9,    9,
        8,    8,    4,    4,   14,   13,   10,   82,   12,   19,
       19,   18,   18,   17,   17,   16,   15,   15,    2,    1,
       26,   21,   20,   26,    0,    0,    0,    0,   47,   50,

       44,   28,   45,   42,    0,    0,   49,   46,   48,   40,
       40,   40,   33,   40,   40,   40,   36,   40,   40,   40,
       51,    8,    8,    4,    4,    6,    7,    8,    8,   10,
       19,   19,   18,   18,   17,   17,   15,   15,   25,   22,
       23,   24,   78,    0,    0,    0,    0,   44,    0,    0,
       43,   41,   40,   40,   40,   29,   35,   40,   40,   40,
        8,    6,    8,    8,    5,    3,   11,   11,   11,   11,
       80,    0,    0,    0,   44,    0,    0,   45,   40,   32,
       34,   40,   38,   40,    8,    6,    8,    8,    7,   76,
        0,    0,   44,   31,   40,   39,    8,    6,    0,   37,

       79,    0
    } ;

static yyconst flex_int32_t yy_ec[256] =
    {   0,
        1,    1,    1,    1,    1,    1,    1,    1,    2,    3,
        2,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    2,    4,    5,    6,    1,    7,    8,    9,   10,
       11,   12,   13,   14,   15,   16,   17,   18,   19,   19,
       19,   19,   19,   19,   19,   19,   19,   20,   21,   22,
       23,   24,    1,    1,   25,   26,   27,   28,   29,   30,
       31,   32,   33,   34,   35,   36,   37,   38,   39,   40,
       34,   41,   42,   43,   44,   34,   45,   46,   47,   34,
       48,   49,   50,   51,   34,    1,   52,   53,   54,   55,

       56,   57,   58,   59,   60,   34,   61,   62,   63,   64,
       65,   66,   34,   67,   68,   69,   70,   34,   71,   72,
       73,   34,   74,   75,   76,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,

        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    1,    1
    } ;

static yyconst flex_int32_t yy_meta[77] =
    {   0,
        1,    2,    2,    1,    1,    1,    1,    1,    1,    1,
        1,    1,    1,    2,    1,    1,    1,    3,    3,    1,
        1,    1,    2,    1,    3,    3,    3,    3,    3,    3,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    1,    1,    1,
        2,    3,    3,    3,    3,    3,    3,    4,    4,    4,
        4,    4,    4,    4,    4,    4,    4,    4,    4,    4,
        4,    4,    4,    1,    1,    1
    } ;

static yyconst flex_int16_t yy_base[216] =
    {   0,
        0,    2,   70,    0,  145,  163,  214,    0,  290,    0,
      366,    0,  442,    0,  613,  548,    4,    9,  541,  771,
      771,  771,  771,  103,  771,    0,    0,  107,  771,  771,
      515,  771,  771,  771,  520,  771,  771,  771,  771,  771,
      771,  771,    3,  195,  503,  154,  771,  771,  175,  171,
      130,    0,    0,    3,    1,  131,    4,    3,    5,  119,
        5,  771,  771,  771,  771,   76,  771,    0,  771,  771,
       29,   31,  507,  511,  771,  771,  771,    0,  771,    0,
      133,    0,  136,    0,  147,  771,    0,  149,  771,  771,
      771,  771,  771,  528,    0,  129,  495,  487,  771,  771,

      516,  771,  525,  539,  137,    0,  771,  771,  771,    0,
      508,  503,    0,  506,  514,  511,    0,  513,  521,  513,
      771,    0,   33,  569,  575,  571,  578,  186,  624,  771,
        0,  548,    0,  555,    0,  556,    0,  571,  771,  771,
      771,  771,    0,  572,  571,  579,  599,  590,  620,  171,
      173,    0,  588,  544,  591,    0,    0,  578,  590,  600,
      642,  640,  652,  184,  188,  679,    0,    0,    0,    0,
      771,  595,  625,  190,  543,  669,  552,  605,  631,    0,
        0,  627,    0,  616,  655,  667,  697,  681,  683,  771,
      655,  695,  700,    0,  657,    0,  704,  706,  661,    0,

      771,  771,  736,  740,  744,  748,  750,  754,  756,  758,
      760,  762,  766,    8,    7
    } ;

static yyconst flex_int16_t yy_def[216] =
    {   0,
      203,  203,  202,    3,  204,  204,  202,    7,  202,    9,
      202,   11,  202,   13,  205,  205,  206,  206,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      207,  202,  202,  202,  202,  202,  202,  208,  202,  202,
      208,  208,  208,  208,  202,  202,  202,  202,  202,  209,
      209,  210,  210,  211,  211,  202,  212,  212,  202,  202,
      202,  202,  202,  213,  214,  202,  202,  202,  202,  202,

      202,  202,  202,  202,  202,  215,  202,  202,  202,  207,
      207,  207,  207,  207,  207,  207,  207,  207,  207,  207,
      202,  208,  208,  208,  208,  208,  208,  208,  208,  202,
      209,  209,  210,  210,  211,  211,  212,  212,  202,  202,
      202,  202,  214,  202,  202,  202,  202,  202,  202,  202,
      202,  215,  207,  207,  207,  207,  207,  207,  207,  207,
      208,  208,  208,  208,  208,  208,  209,  210,  211,  212,
      202,  202,  202,  202,  202,  202,  202,  202,  207,  207,
      207,  207,  207,  207,  208,  208,  208,  208,  208,  202,
      202,  202,  202,  207,  207,  207,  208,  208,  202,  207,

      202,    0,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202
    } ;

static yyconst flex_int16_t yy_nxt[848] =
    {   0,
      202,   21,   22,   21,   22,   23,   92,   23,   93,  152,
      143,   92,  202,   93,  202,  202,  130,   24,  202,   24,
      101,  101,   25,  202,   25,  202,   26,  112,   26,   27,
      202,   27,  117,  118,  202,   97,  120,  202,   96,  113,
      111,   28,  116,   28,  123,  202,  124,  125,  126,  126,
      126,  126,   94,   26,  112,   26,   27,   94,   27,  117,
      118,   97,  202,  120,   96,  113,  111,   28,  116,   28,
       20,   29,   30,   31,   32,   33,   34,   35,   36,   37,
       38,   39,   40,   41,   42,   43,   44,   45,   46,   47,
       48,   49,   50,   51,   52,   53,   54,   55,   56,   57,

       52,   52,   58,   52,   52,   52,   52,   52,   52,   52,
       59,   60,   52,   52,   61,   52,   52,   62,   20,   63,
       64,   52,   53,   54,   55,   56,   57,   52,   52,   58,
       52,   52,   52,   52,   52,   52,   59,   60,   52,   52,
       61,   52,   52,   65,   66,   67,   69,   70,   95,  150,
      121,  150,  109,   98,  151,  151,  144,   71,   20,   71,
       72,  119,   73,   74,   69,   70,  114,   20,  115,  103,
      132,  104,  104,  134,   95,   71,   20,   71,   72,   98,
       73,   74,  105,  144,  136,   20,  138,  119,  151,  151,
      151,  151,  114,  108,  115,   20,  132,  107,  164,  134,

      164,  165,  165,  165,  165,  165,  165,  175,  175,  105,
      136,  102,  138,   20,   20,   75,   76,   20,   20,   77,
       20,   20,   20,   20,   20,   20,   20,   20,   20,   20,
       78,   20,   20,   20,   20,   20,   79,   20,   80,   80,
       80,   80,   81,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   20,   20,   20,   20,   80,   80,   80,   80,   81,
       80,   80,   80,   80,   80,   80,   80,   80,   80,   80,
       80,   80,   80,   80,   80,   80,   80,   20,   20,   20,
       20,   75,   76,   20,   20,   77,   20,   20,   20,   20,

       20,   20,   20,   20,   20,   20,   78,   20,   20,   20,
       20,   20,   79,   20,   82,   82,   82,   82,   83,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   20,   20,   20,
       20,   82,   82,   82,   82,   83,   82,   82,   82,   82,
       82,   82,   82,   82,   82,   82,   82,   82,   82,   82,
       82,   82,   82,   20,   20,   20,   20,   75,   76,   20,
       20,   77,   20,   20,   20,   20,   20,   20,   20,   20,
       20,   20,   78,   20,   20,   20,   20,   20,   79,   20,
       84,   84,   84,   84,   85,   84,   84,   84,   84,   84,

       84,   84,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   20,   20,   20,   20,   84,   84,   84,
       84,   85,   84,   84,   84,   84,   84,   84,   84,   84,
       84,   84,   84,   84,   84,   84,   84,   84,   84,   20,
       20,   20,   20,   75,   76,   20,   20,   77,   20,   20,
       20,   20,   20,   20,   20,   86,   20,   20,   78,   20,
       20,   20,   20,   20,   79,   20,   87,   87,   87,   87,
       88,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   87,   87,   87,   87,   20,
       20,   20,   20,   87,   87,   87,   87,   88,   87,   87,

       87,   87,   87,   87,   87,   87,   87,   87,   87,   87,
       87,   87,   87,   87,   87,   20,   20,   20,  103,  145,
      104,  104,  127,  146,  125,  125,  127,  100,  125,  125,
      140,  105,  141,  101,  101,  128,  153,   99,  154,  128,
      202,  156,  148,  148,  147,  160,  145,  155,  106,  146,
       90,  157,  129,  149,  103,  158,  104,  104,  105,  159,
      175,  175,  128,  153,  154,  142,  128,  105,  156,  178,
      178,  147,  160,  155,  106,  167,  141,  157,  129,  180,
      149,  158,  168,  169,  127,  159,  125,  125,  126,  126,
      127,  142,  125,  125,  105,  162,  162,  128,  170,  161,

      171,  172,  167,  128,  173,  180,  163,  148,  148,  168,
      169,  174,  179,  174,  129,   90,  175,  175,  176,  181,
      202,  182,  178,  178,  128,  170,  161,  171,  172,  183,
      128,  173,  177,  163,  177,  184,  190,  178,  178,  179,
      129,  166,  166,  202,  196,  176,  181,  182,  166,  166,
      166,  166,  166,  166,  185,  183,  185,  162,  162,  186,
      186,  184,  190,  191,  188,  194,  188,  195,  187,  189,
      189,  196,  186,  186,  202,  166,  166,  166,  166,  166,
      166,  192,  202,  192,  186,  186,  193,  193,  202,  191,
      199,  194,  202,  195,  200,  187,  166,  166,  189,  189,

      189,  189,  201,  166,  166,  166,  166,  166,  166,  197,
      202,  197,  193,  193,  198,  198,  199,  193,  193,  202,
      200,  198,  198,  198,  198,  202,  202,  202,  201,  202,
      166,  166,  166,  166,  166,  166,   20,   20,   20,   20,
       68,   68,   68,   68,   89,   89,   89,   89,   91,   91,
       91,   91,  110,  110,  122,  202,  122,  122,  131,  131,
      133,  133,  135,  135,  137,  137,  139,  139,  139,  139,
       19,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,

      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202
    } ;

static yyconst flex_int16_t yy_chk[848] =
    {   0,
        0,    1,    1,    2,    2,    1,   17,    2,   17,  215,
      214,   18,    0,   18,    0,    0,   78,    1,    0,    2,
       43,   43,    1,    0,    2,    0,    1,   54,    2,    1,
        0,    2,   58,   59,    0,   27,   61,    0,   26,   55,
       53,    1,   57,    2,   71,    0,   71,   71,   72,   72,
      123,  123,   17,    1,   54,    2,    1,   18,    2,   58,
       59,   27,    0,   61,   26,   55,   53,    1,   57,    2,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,

        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    3,    3,    3,    3,
        3,    3,    3,    3,    3,    3,    5,    5,   24,  105,
       66,  105,   51,   28,  105,  105,   96,    5,    5,    5,
        5,   60,    5,    5,    6,    6,   56,    5,   56,   46,
       81,   46,   46,   83,   24,    6,    6,    6,    6,   28,
        6,    6,   46,   96,   85,    6,   88,   60,  150,  150,
      151,  151,   56,   50,   56,    5,   81,   49,  128,   83,

      128,  164,  164,  128,  128,  165,  165,  174,  174,   46,
       85,   44,   88,    6,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        7,    7,    7,    7,    7,    7,    7,    7,    7,    7,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,

        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,    9,    9,    9,    9,
        9,    9,    9,    9,    9,    9,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,

       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   11,   11,   11,   11,   11,   11,   11,   11,
       11,   11,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,

       13,   13,   13,   13,   13,   13,   13,   13,   13,   13,
       13,   13,   13,   13,   13,   13,   13,   13,   45,   97,
       45,   45,   73,   98,   73,   73,   74,   35,   74,   74,
       94,   45,   94,  101,  101,   73,  111,   31,  112,   74,
       19,  115,  103,  103,  101,  120,   97,  114,   45,   98,
       16,  116,   73,  103,  104,  118,  104,  104,   45,  119,
      175,  175,   73,  111,  112,   94,   74,  104,  115,  177,
      177,  101,  120,  114,   45,  132,   94,  116,   73,  154,
      103,  118,  134,  136,  124,  119,  124,  124,  126,  126,
      125,   94,  125,  125,  104,  127,  127,  124,  138,  126,

      144,  145,  132,  125,  146,  154,  127,  148,  148,  134,
      136,  147,  153,  147,  124,   15,  147,  147,  148,  155,
        0,  158,  178,  178,  124,  138,  126,  144,  145,  159,
      125,  146,  149,  127,  149,  160,  172,  149,  149,  153,
      124,  129,  129,    0,  184,  148,  155,  158,  129,  129,
      129,  129,  129,  129,  161,  159,  161,  162,  162,  161,
      161,  160,  172,  173,  163,  179,  163,  182,  162,  163,
      163,  184,  185,  185,    0,  129,  129,  129,  129,  129,
      129,  176,    0,  176,  186,  186,  176,  176,    0,  173,
      191,  179,    0,  182,  195,  162,  166,  166,  188,  188,

      189,  189,  199,  166,  166,  166,  166,  166,  166,  187,
        0,  187,  192,  192,  187,  187,  191,  193,  193,    0,
      195,  197,  197,  198,  198,    0,    0,    0,  199,    0,
      166,  166,  166,  166,  166,  166,  203,  203,  203,  203,
      204,  204,  204,  204,  205,  205,  205,  205,  206,  206,
      206,  206,  207,  207,  208,    0,  208,  208,  209,  209,
      210,  210,  211,  211,  212,  212,  213,  213,  213,  213,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,

      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202,  202,  202,  202,
      202,  202,  202,  202,  202,  202,  202
    } ;

/* Table of booleans, true if rule could match eol. */
static yyconst flex_int32_t yy_rule_can_match_eol[84] =
    {   0,
1, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 1, 1, 0, 0, 0, 0, 0, 
    0, 1, 1, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 
    0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 0, 0, 0, 0, 0, 
    0, 1, 0, 0,     };

/* The intent behind this definition is that it'll catch
 * any uses of REJECT which flex missed.
 */
#define REJECT reject_used_but_not_detected
#define yymore() yymore_used_but_not_detected
#define YY_MORE_ADJ 0
#define YY_RESTORE_YY_MORE_OFFSET
#line 1 "lexer.lex"
#line 13 "lexer.lex"
    #pragma GCC diagnostic ignored "-Wunused-parameter"
    #pragma GCC diagnostic ignored "-Wconversion"
    #pragma GCC diagnostic ignored "-Wunused-function"

    #include "instance.hpp"
    #include "log/log.hpp"
    #include "parser.hpp"

    #include <string.h>
    #include <stdlib.h>
    #include <sstream>
    #include <boost/format.hpp>

    using namespace gorc::cog;
    #define YY_EXTRA_TYPE grammar::instance*

    #define YY_USER_ACTION {                                            \
        yylloc->first_line = yylloc->last_line = yylineno;                 \
        yylloc->first_col = yycolumn;                                    \
        yylloc->last_col = yycolumn + yyleng - 1;                        \
        yycolumn += yyleng;                                                 \
    }

    #define YY_INPUT(buf, result, max_size) {                            \
        buf[0] = yyextra->get_next();                                    \
        if(buf[0] == '\0') result = YY_NULL;                            \
        else result = 1;                                                \
    }

    int parse_hex_int(char*);









#line 769 "lexer.cpp"

#define INITIAL 0
#define CODE_SECTION 1
#define SYMBOL_FIELD 2
#define SYMBOL_SECTION 3
#define SYMBOL_DEF 4
#define SYMBOL_DEF_ASSIGN 5
#define SYMBOL_EXT_SECTION 6
#define LINE_COMMENT 7
#define STRING 8

#ifndef YY_NO_UNISTD_H
/* Special case for "unistd.h", since it is non-ANSI. We include it way
 * down here because we want the user's section 1 to have been scanned first.
 * The user has a chance to override it with an option.
 */
#include <unistd.h>
#endif

#ifndef YY_EXTRA_TYPE
#define YY_EXTRA_TYPE void *
#endif

/* Holds the entire state of the reentrant scanner. */
struct yyguts_t
    {

    /* User-defined. Not touched by flex. */
    YY_EXTRA_TYPE yyextra_r;

    /* The rest are the same as the globals declared in the non-reentrant scanner. */
    FILE *yyin_r, *yyout_r;
    size_t yy_buffer_stack_top; /**< index of top of stack. */
    size_t yy_buffer_stack_max; /**< capacity of stack. */
    YY_BUFFER_STATE * yy_buffer_stack; /**< Stack as an array. */
    char yy_hold_char;
    yy_size_t yy_n_chars;
    yy_size_t yyleng_r;
    char *yy_c_buf_p;
    int yy_init;
    int yy_start;
    int yy_did_buffer_switch_on_eof;
    int yy_start_stack_ptr;
    int yy_start_stack_depth;
    int *yy_start_stack;
    yy_state_type yy_last_accepting_state;
    char* yy_last_accepting_cpos;

    int yylineno_r;
    int yy_flex_debug_r;

    char *yytext_r;
    int yy_more_flag;
    int yy_more_len;

    YYSTYPE * yylval_r;

    YYLTYPE * yylloc_r;

    }; /* end struct yyguts_t */

static int yy_init_globals (yyscan_t yyscanner );

    /* This must go here because YYSTYPE and YYLTYPE are included
     * from bison output in section 1.*/
    #    define yylval yyg->yylval_r
    
    #    define yylloc yyg->yylloc_r
    
int gra_lex_init (yyscan_t* scanner);

int gra_lex_init_extra (YY_EXTRA_TYPE user_defined,yyscan_t* scanner);

/* Accessor methods to globals.
   These are made visible to non-reentrant scanners for convenience. */

int gra_lex_destroy (yyscan_t yyscanner );

int gra_get_debug (yyscan_t yyscanner );

void gra_set_debug (int debug_flag ,yyscan_t yyscanner );

YY_EXTRA_TYPE gra_get_extra (yyscan_t yyscanner );

void gra_set_extra (YY_EXTRA_TYPE user_defined ,yyscan_t yyscanner );

FILE *gra_get_in (yyscan_t yyscanner );

void gra_set_in  (FILE * in_str ,yyscan_t yyscanner );

FILE *gra_get_out (yyscan_t yyscanner );

void gra_set_out  (FILE * out_str ,yyscan_t yyscanner );

yy_size_t gra_get_leng (yyscan_t yyscanner );

char *gra_get_text (yyscan_t yyscanner );

int gra_get_lineno (yyscan_t yyscanner );

void gra_set_lineno (int line_number ,yyscan_t yyscanner );

int gra_get_column  (yyscan_t yyscanner );

void gra_set_column (int column_no ,yyscan_t yyscanner );

YYSTYPE * gra_get_lval (yyscan_t yyscanner );

void gra_set_lval (YYSTYPE * yylval_param ,yyscan_t yyscanner );

       YYLTYPE *gra_get_lloc (yyscan_t yyscanner );
    
        void gra_set_lloc (YYLTYPE * yylloc_param ,yyscan_t yyscanner );
    
/* Macros after this point can all be overridden by user definitions in
 * section 1.
 */

#ifndef YY_SKIP_YYWRAP
#ifdef __cplusplus
extern "C" int gra_wrap (yyscan_t yyscanner );
#else
extern int gra_wrap (yyscan_t yyscanner );
#endif
#endif

    static void yyunput (int c,char *buf_ptr  ,yyscan_t yyscanner);
    
#ifndef yytext_ptr
static void yy_flex_strncpy (char *,yyconst char *,int ,yyscan_t yyscanner);
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * ,yyscan_t yyscanner);
#endif

#ifndef YY_NO_INPUT

#ifdef __cplusplus
static int yyinput (yyscan_t yyscanner );
#else
static int input (yyscan_t yyscanner );
#endif

#endif

    static void yy_push_state (int new_state ,yyscan_t yyscanner);
    
    static void yy_pop_state (yyscan_t yyscanner );
    
    static int yy_top_state (yyscan_t yyscanner );
    
/* Amount of stuff to slurp up with each read. */
#ifndef YY_READ_BUF_SIZE
#ifdef __ia64__
/* On IA-64, the buffer size is 16k, not 8k */
#define YY_READ_BUF_SIZE 16384
#else
#define YY_READ_BUF_SIZE 8192
#endif /* __ia64__ */
#endif

/* Copy whatever the last rule matched to the standard output. */
#ifndef ECHO
/* This used to be an fputs(), but since the string might contain NUL's,
 * we now use fwrite().
 */
#define ECHO do { if (fwrite( yytext, yyleng, 1, yyout )) {} } while (0)
#endif

/* Gets input and stuffs it into "buf".  number of characters read, or YY_NULL,
 * is returned in "result".
 */
#ifndef YY_INPUT
#define YY_INPUT(buf,result,max_size) \
	if ( YY_CURRENT_BUFFER_LVALUE->yy_is_interactive ) \
		{ \
		int c = '*'; \
		size_t n; \
		for ( n = 0; n < max_size && \
			     (c = getc( yyin )) != EOF && c != '\n'; ++n ) \
			buf[n] = (char) c; \
		if ( c == '\n' ) \
			buf[n++] = (char) c; \
		if ( c == EOF && ferror( yyin ) ) \
			YY_FATAL_ERROR( "input in flex scanner failed" ); \
		result = n; \
		} \
	else \
		{ \
		errno=0; \
		while ( (result = fread(buf, 1, max_size, yyin))==0 && ferror(yyin)) \
			{ \
			if( errno != EINTR) \
				{ \
				YY_FATAL_ERROR( "input in flex scanner failed" ); \
				break; \
				} \
			errno=0; \
			clearerr(yyin); \
			} \
		}\
\

#endif

/* No semi-colon after return; correct usage is to write "yyterminate();" -
 * we don't want an extra ';' after the "return" because that will cause
 * some compilers to complain about unreachable statements.
 */
#ifndef yyterminate
#define yyterminate() return YY_NULL
#endif

/* Number of entries by which start-condition stack grows. */
#ifndef YY_START_STACK_INCR
#define YY_START_STACK_INCR 25
#endif

/* Report a fatal error. */
#ifndef YY_FATAL_ERROR
#define YY_FATAL_ERROR(msg) yy_fatal_error( msg , yyscanner)
#endif

/* end tables serialization structures and prototypes */

/* Default declaration of generated scanner - a define so the user can
 * easily add parameters.
 */
#ifndef YY_DECL
#define YY_DECL_IS_OURS 1

extern int gra_lex \
               (YYSTYPE * yylval_param,YYLTYPE * yylloc_param ,yyscan_t yyscanner);

#define YY_DECL int gra_lex \
               (YYSTYPE * yylval_param, YYLTYPE * yylloc_param , yyscan_t yyscanner)
#endif /* !YY_DECL */

/* Code executed at the beginning of each rule, after yytext and yyleng
 * have been set up.
 */
#ifndef YY_USER_ACTION
#define YY_USER_ACTION
#endif

/* Code executed at the end of each rule. */
#ifndef YY_BREAK
#define YY_BREAK break;
#endif

#define YY_RULE_SETUP \
	YY_USER_ACTION

/** The main scanner function which does all the work.
 */
YY_DECL
{
	register yy_state_type yy_current_state;
	register char *yy_cp, *yy_bp;
	register int yy_act;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yylval = yylval_param;

    yylloc = yylloc_param;

	if ( !yyg->yy_init )
		{
		yyg->yy_init = 1;

#ifdef YY_USER_INIT
		YY_USER_INIT;
#endif

		if ( ! yyg->yy_start )
			yyg->yy_start = 1;	/* first start state */

		if ( ! yyin )
			yyin = stdin;

		if ( ! yyout )
			yyout = stdout;

		if ( ! YY_CURRENT_BUFFER ) {
			gra_ensure_buffer_stack (yyscanner);
			YY_CURRENT_BUFFER_LVALUE =
				gra__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
		}

		gra__load_buffer_state(yyscanner );
		}

	{
#line 60 "lexer.lex"


#line 1067 "lexer.cpp"

	while ( 1 )		/* loops until end-of-file is reached */
		{
		yy_cp = yyg->yy_c_buf_p;

		/* Support of yytext. */
		*yy_cp = yyg->yy_hold_char;

		/* yy_bp points to the position in yy_ch_buf of the start of
		 * the current run.
		 */
		yy_bp = yy_cp;

		yy_current_state = yyg->yy_start;
yy_match:
		do
			{
			register YY_CHAR yy_c = yy_ec[YY_SC_TO_UI(*yy_cp)] ;
			if ( yy_accept[yy_current_state] )
				{
				yyg->yy_last_accepting_state = yy_current_state;
				yyg->yy_last_accepting_cpos = yy_cp;
				}
			while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
				{
				yy_current_state = (int) yy_def[yy_current_state];
				if ( yy_current_state >= 203 )
					yy_c = yy_meta[(unsigned int) yy_c];
				}
			yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
			++yy_cp;
			}
		while ( yy_current_state != 202 );
		yy_cp = yyg->yy_last_accepting_cpos;
		yy_current_state = yyg->yy_last_accepting_state;

yy_find_action:
		yy_act = yy_accept[yy_current_state];

		YY_DO_BEFORE_ACTION;

		if ( yy_act != YY_END_OF_BUFFER && yy_rule_can_match_eol[yy_act] )
			{
			yy_size_t yyl;
			for ( yyl = 0; yyl < yyleng; ++yyl )
				if ( yytext[yyl] == '\n' )
					   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;
			}

do_action:	/* This label is used only to access EOF actions. */

		switch ( yy_act )
	{ /* beginning of action switch */
			case 0: /* must back up */
			/* undo the effects of YY_DO_BEFORE_ACTION */
			*yy_cp = yyg->yy_hold_char;
			yy_cp = yyg->yy_last_accepting_cpos;
			yy_current_state = yyg->yy_last_accepting_state;
			goto yy_find_action;

case 1:
/* rule 1 can match eol */
YY_RULE_SETUP
#line 62 "lexer.lex"
{ yy_pop_state(yyextra->get_scanner()); }
	YY_BREAK
case 2:
YY_RULE_SETUP
#line 63 "lexer.lex"
/* eat non-terminal input */
	YY_BREAK

case 3:
YY_RULE_SETUP
#line 66 "lexer.lex"
{
                                yy_pop_state(yyextra->get_scanner());
                                yylval->integer = parse_hex_int(yytext);
                                return INTEGER_LITERAL;
                            }
	YY_BREAK
case 4:
YY_RULE_SETUP
#line 72 "lexer.lex"
{
                                yy_pop_state(yyextra->get_scanner());
                                yylval->integer = atoi(yytext);
                                return INTEGER_LITERAL;
                            }
	YY_BREAK
case 5:
YY_RULE_SETUP
#line 78 "lexer.lex"
{
                                yy_pop_state(yyextra->get_scanner());
                                yylval->floating = static_cast<float>(atof(yytext));
                                return FLOAT_LITERAL;
                            }
	YY_BREAK
case 6:
YY_RULE_SETUP
#line 84 "lexer.lex"
{
                                yy_pop_state(yyextra->get_scanner());
                                yylval->floating = static_cast<float>(atof(yytext));
                                return FLOAT_LITERAL;
                            }
	YY_BREAK
case 7:
YY_RULE_SETUP
#line 90 "lexer.lex"
{
                                yy_pop_state(yyextra->get_scanner());
                                yylval->floating = static_cast<float>(atof(yytext));
                                return FLOAT_LITERAL;
                            }
	YY_BREAK
case 8:
YY_RULE_SETUP
#line 96 "lexer.lex"
{
                                yy_pop_state(yyextra->get_scanner());
                                yylval->string = strdup(yytext);
                                return STRING_FRAGMENT;
                            }
	YY_BREAK
case 9:
/* rule 9 can match eol */
YY_RULE_SETUP
#line 102 "lexer.lex"
/* Ignore other whitespace */
	YY_BREAK


case 10:
YY_RULE_SETUP
#line 106 "lexer.lex"
{
                                yy_pop_state(yyextra->get_scanner());
                                yy_push_state(SYMBOL_SECTION, yyextra->get_scanner());
                                yy_push_state(LINE_COMMENT, yyextra->get_scanner());
                                return ENDLINE;
                            }
	YY_BREAK
case 11:
YY_RULE_SETUP
#line 113 "lexer.lex"
{ yy_pop_state(yyextra->get_scanner()); return END; }
	YY_BREAK
case 12:
YY_RULE_SETUP
#line 115 "lexer.lex"
{
                                yy_pop_state(yyextra->get_scanner());
                                yy_push_state(SYMBOL_EXT_SECTION, yyextra->get_scanner());
                                yy_push_state(SYMBOL_FIELD, yyextra->get_scanner());
                                return '=';
                            }
	YY_BREAK
case 13:
/* rule 13 can match eol */
YY_RULE_SETUP
#line 122 "lexer.lex"
{
                                yy_pop_state(yyextra->get_scanner());
                                yy_push_state(SYMBOL_SECTION, yyextra->get_scanner());
                                return ENDLINE;
                            }
	YY_BREAK
case 14:
/* rule 14 can match eol */
YY_RULE_SETUP
#line 128 "lexer.lex"
/* Ignore other whitespace */
	YY_BREAK


case 15:
YY_RULE_SETUP
#line 132 "lexer.lex"
{ yylval->string = strdup(yytext); return IDENTIFIER; }
	YY_BREAK
case 16:
YY_RULE_SETUP
#line 133 "lexer.lex"
/* Ignore commas */
	YY_BREAK

case 17:
YY_RULE_SETUP
#line 136 "lexer.lex"
{
                                yy_pop_state(yyextra->get_scanner());
                                yy_push_state(SYMBOL_EXT_SECTION, yyextra->get_scanner());
                                yylval->string = strdup(yytext);
                                return IDENTIFIER;
                            }
	YY_BREAK
case 18:
YY_RULE_SETUP
#line 143 "lexer.lex"
{
                                yy_pop_state(yyextra->get_scanner());
                                yy_push_state(SYMBOL_DEF_ASSIGN, yyextra->get_scanner());
                                yylval->string = strdup(yytext);
                                return IDENTIFIER;
                            }
	YY_BREAK
case 19:
YY_RULE_SETUP
#line 150 "lexer.lex"
{
                                    yy_pop_state(yyextra->get_scanner());
                                    yy_push_state(SYMBOL_DEF, yyextra->get_scanner());
                                    yylval->string = strdup(yytext);
                                    return IDENTIFIER;
                                }
	YY_BREAK

case YY_STATE_EOF(STRING):
#line 158 "lexer.lex"
{
                                gorc::diagnostic_context dc(nullptr, yylloc->first_line, yylloc->first_col);
                                LOG_ERROR("unexpected eof in string literal");
                            }
	YY_BREAK
case 20:
YY_RULE_SETUP
#line 163 "lexer.lex"
{
                                yy_pop_state(yyextra->get_scanner());
                                yylval->string = strdup(yyextra->token_buffer.c_str());
                                return STRING_LITERAL;
                            }
	YY_BREAK
case 21:
/* rule 21 can match eol */
YY_RULE_SETUP
#line 169 "lexer.lex"
{
                                gorc::diagnostic_context dc(nullptr, yylloc->first_line, yylloc->first_col);
                                LOG_ERROR("unescaped newline in string literal");
                            }
	YY_BREAK
case 22:
/* rule 22 can match eol */
YY_RULE_SETUP
#line 174 "lexer.lex"
/* Consume escaped newlines */
	YY_BREAK
case 23:
YY_RULE_SETUP
#line 176 "lexer.lex"
{ yyextra->token_buffer.push_back(yytext[1]); }
	YY_BREAK
case 24:
YY_RULE_SETUP
#line 178 "lexer.lex"
{ yyextra->token_buffer.push_back('\n'); }
	YY_BREAK
case 25:
YY_RULE_SETUP
#line 180 "lexer.lex"
{
                                gorc::diagnostic_context dc(nullptr, yylloc->first_line, yylloc->first_col);
                                LOG_ERROR(gorc::format("unknown escape sequence '%s'") % yytext);
                            }
	YY_BREAK
case 26:
YY_RULE_SETUP
#line 185 "lexer.lex"
{ yyextra->token_buffer.append(yytext); }
	YY_BREAK


case 27:
YY_RULE_SETUP
#line 189 "lexer.lex"
{ yy_push_state(LINE_COMMENT, yyextra->get_scanner()); }
	YY_BREAK
case 28:
YY_RULE_SETUP
#line 190 "lexer.lex"
{ yy_push_state(LINE_COMMENT, yyextra->get_scanner()); }
	YY_BREAK
case 29:
YY_RULE_SETUP
#line 191 "lexer.lex"
{ yy_pop_state(yyextra->get_scanner()); return END; }
	YY_BREAK
case 30:
YY_RULE_SETUP
#line 193 "lexer.lex"
{ yy_push_state(STRING, yyextra->get_scanner()); yyextra->token_buffer.clear(); }
	YY_BREAK
case 31:
YY_RULE_SETUP
#line 195 "lexer.lex"
{ return BREAK; }
	YY_BREAK
case 32:
YY_RULE_SETUP
#line 196 "lexer.lex"
{ return CALL; }
	YY_BREAK
case 33:
YY_RULE_SETUP
#line 197 "lexer.lex"
{ return DO; }
	YY_BREAK
case 34:
YY_RULE_SETUP
#line 198 "lexer.lex"
{ return ELSE; }
	YY_BREAK
case 35:
YY_RULE_SETUP
#line 199 "lexer.lex"
{ return FOR; }
	YY_BREAK
case 36:
YY_RULE_SETUP
#line 200 "lexer.lex"
{ return IF; }
	YY_BREAK
case 37:
YY_RULE_SETUP
#line 201 "lexer.lex"
{ return RETURN; }
	YY_BREAK
case 38:
YY_RULE_SETUP
#line 202 "lexer.lex"
{ return RETURN; }
	YY_BREAK
case 39:
YY_RULE_SETUP
#line 203 "lexer.lex"
{ return WHILE; }
	YY_BREAK
case 40:
YY_RULE_SETUP
#line 205 "lexer.lex"
{ yylval->string = strdup(yytext); return IDENTIFIER; }
	YY_BREAK
case 41:
YY_RULE_SETUP
#line 207 "lexer.lex"
{ yylval->integer = parse_hex_int(yytext); return INTEGER_LITERAL; }
	YY_BREAK
case 42:
YY_RULE_SETUP
#line 208 "lexer.lex"
{ yylval->integer = atoi(yytext); return INTEGER_LITERAL; }
	YY_BREAK
case 43:
YY_RULE_SETUP
#line 210 "lexer.lex"
{ yylval->floating = static_cast<float>(atof(yytext)); return FLOAT_LITERAL; }
	YY_BREAK
case 44:
YY_RULE_SETUP
#line 211 "lexer.lex"
{ yylval->floating = static_cast<float>(atof(yytext)); return FLOAT_LITERAL; }
	YY_BREAK
case 45:
YY_RULE_SETUP
#line 212 "lexer.lex"
{ yylval->floating = static_cast<float>(atof(yytext)); return FLOAT_LITERAL; }
	YY_BREAK
case 46:
YY_RULE_SETUP
#line 214 "lexer.lex"
{ return EQ_OP; }
	YY_BREAK
case 47:
YY_RULE_SETUP
#line 215 "lexer.lex"
{ return NE_OP; }
	YY_BREAK
case 48:
YY_RULE_SETUP
#line 216 "lexer.lex"
{ return GE_OP; }
	YY_BREAK
case 49:
YY_RULE_SETUP
#line 217 "lexer.lex"
{ return LE_OP; }
	YY_BREAK
case 50:
YY_RULE_SETUP
#line 219 "lexer.lex"
{ return LOGICAL_AND_OP; }
	YY_BREAK
case 51:
YY_RULE_SETUP
#line 220 "lexer.lex"
{ return LOGICAL_OR_OP; }
	YY_BREAK
case 52:
YY_RULE_SETUP
#line 222 "lexer.lex"
{ return ':'; }
	YY_BREAK
case 53:
YY_RULE_SETUP
#line 223 "lexer.lex"
{ return ';'; }
	YY_BREAK
case 54:
YY_RULE_SETUP
#line 224 "lexer.lex"
{ return ','; }
	YY_BREAK
case 55:
YY_RULE_SETUP
#line 226 "lexer.lex"
{ return '\''; }
	YY_BREAK
case 56:
YY_RULE_SETUP
#line 228 "lexer.lex"
{ return '+'; }
	YY_BREAK
case 57:
YY_RULE_SETUP
#line 229 "lexer.lex"
{ return '-'; }
	YY_BREAK
case 58:
YY_RULE_SETUP
#line 230 "lexer.lex"
{ return '*'; }
	YY_BREAK
case 59:
YY_RULE_SETUP
#line 231 "lexer.lex"
{ return '/'; }
	YY_BREAK
case 60:
YY_RULE_SETUP
#line 232 "lexer.lex"
{ return '%'; }
	YY_BREAK
case 61:
YY_RULE_SETUP
#line 234 "lexer.lex"
{ return '!'; }
	YY_BREAK
case 62:
YY_RULE_SETUP
#line 236 "lexer.lex"
{ return '&'; }
	YY_BREAK
case 63:
YY_RULE_SETUP
#line 237 "lexer.lex"
{ return '|'; }
	YY_BREAK
case 64:
YY_RULE_SETUP
#line 238 "lexer.lex"
{ return '^'; }
	YY_BREAK
case 65:
YY_RULE_SETUP
#line 240 "lexer.lex"
{ return '='; }
	YY_BREAK
case 66:
YY_RULE_SETUP
#line 242 "lexer.lex"
{ return '{'; }
	YY_BREAK
case 67:
YY_RULE_SETUP
#line 243 "lexer.lex"
{ return '}'; }
	YY_BREAK
case 68:
YY_RULE_SETUP
#line 244 "lexer.lex"
{ return '('; }
	YY_BREAK
case 69:
YY_RULE_SETUP
#line 245 "lexer.lex"
{ return ')'; }
	YY_BREAK
case 70:
YY_RULE_SETUP
#line 246 "lexer.lex"
{ return '<'; }
	YY_BREAK
case 71:
YY_RULE_SETUP
#line 247 "lexer.lex"
{ return '>'; }
	YY_BREAK
case 72:
YY_RULE_SETUP
#line 248 "lexer.lex"
{ return '['; }
	YY_BREAK
case 73:
YY_RULE_SETUP
#line 249 "lexer.lex"
{ return ']'; }
	YY_BREAK
case 74:
/* rule 74 can match eol */
YY_RULE_SETUP
#line 251 "lexer.lex"
/* Ignore whitespace */
	YY_BREAK


case 75:
YY_RULE_SETUP
#line 255 "lexer.lex"
{ yy_push_state(LINE_COMMENT, yyextra->get_scanner()); }
	YY_BREAK
case 76:
YY_RULE_SETUP
#line 257 "lexer.lex"
{ return FLAGS; }
	YY_BREAK
case 77:
YY_RULE_SETUP
#line 258 "lexer.lex"
{ return '='; }
	YY_BREAK
case 78:
YY_RULE_SETUP
#line 259 "lexer.lex"
{ yylval->integer = parse_hex_int(yytext); return INTEGER_LITERAL; }
	YY_BREAK
case 79:
YY_RULE_SETUP
#line 261 "lexer.lex"
{ yy_push_state(SYMBOL_SECTION, yyextra->get_scanner()); return SYMBOLS; }
	YY_BREAK
case 80:
YY_RULE_SETUP
#line 262 "lexer.lex"
{ yy_push_state(CODE_SECTION, yyextra->get_scanner()); return CODE; }
	YY_BREAK
case 81:
/* rule 81 can match eol */
YY_RULE_SETUP
#line 264 "lexer.lex"
/* Ignore whitespace */
	YY_BREAK

case 82:
YY_RULE_SETUP
#line 267 "lexer.lex"
{
                                gorc::diagnostic_context dc(nullptr, yylloc->first_line, yylloc->first_col);
                                LOG_ERROR(gorc::format("unrecognized input '%s'") % yytext);
                            }
	YY_BREAK
case 83:
YY_RULE_SETUP
#line 272 "lexer.lex"
YY_FATAL_ERROR( "flex scanner jammed" );
	YY_BREAK
#line 1640 "lexer.cpp"
case YY_STATE_EOF(INITIAL):
case YY_STATE_EOF(CODE_SECTION):
case YY_STATE_EOF(SYMBOL_FIELD):
case YY_STATE_EOF(SYMBOL_SECTION):
case YY_STATE_EOF(SYMBOL_DEF):
case YY_STATE_EOF(SYMBOL_DEF_ASSIGN):
case YY_STATE_EOF(SYMBOL_EXT_SECTION):
case YY_STATE_EOF(LINE_COMMENT):
	yyterminate();

	case YY_END_OF_BUFFER:
		{
		/* Amount of text matched not including the EOB char. */
		int yy_amount_of_matched_text = (int) (yy_cp - yyg->yytext_ptr) - 1;

		/* Undo the effects of YY_DO_BEFORE_ACTION. */
		*yy_cp = yyg->yy_hold_char;
		YY_RESTORE_YY_MORE_OFFSET

		if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_NEW )
			{
			/* We're scanning a new file or input source.  It's
			 * possible that this happened because the user
			 * just pointed yyin at a new source and called
			 * gra_lex().  If so, then we have to assure
			 * consistency between YY_CURRENT_BUFFER and our
			 * globals.  Here is the right place to do so, because
			 * this is the first action (other than possibly a
			 * back-up) that will match for the new input source.
			 */
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
			YY_CURRENT_BUFFER_LVALUE->yy_input_file = yyin;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status = YY_BUFFER_NORMAL;
			}

		/* Note that here we test for yy_c_buf_p "<=" to the position
		 * of the first EOB in the buffer, since yy_c_buf_p will
		 * already have been incremented past the NUL character
		 * (since all states make transitions on EOB to the
		 * end-of-buffer state).  Contrast this with the test
		 * in input().
		 */
		if ( yyg->yy_c_buf_p <= &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			{ /* This was really a NUL. */
			yy_state_type yy_next_state;

			yyg->yy_c_buf_p = yyg->yytext_ptr + yy_amount_of_matched_text;

			yy_current_state = yy_get_previous_state( yyscanner );

			/* Okay, we're now positioned to make the NUL
			 * transition.  We couldn't have
			 * yy_get_previous_state() go ahead and do it
			 * for us because it doesn't know how to deal
			 * with the possibility of jamming (and we don't
			 * want to build jamming into it because then it
			 * will run more slowly).
			 */

			yy_next_state = yy_try_NUL_trans( yy_current_state , yyscanner);

			yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;

			if ( yy_next_state )
				{
				/* Consume the NUL. */
				yy_cp = ++yyg->yy_c_buf_p;
				yy_current_state = yy_next_state;
				goto yy_match;
				}

			else
				{
				yy_cp = yyg->yy_last_accepting_cpos;
				yy_current_state = yyg->yy_last_accepting_state;
				goto yy_find_action;
				}
			}

		else switch ( yy_get_next_buffer( yyscanner ) )
			{
			case EOB_ACT_END_OF_FILE:
				{
				yyg->yy_did_buffer_switch_on_eof = 0;

				if ( gra_wrap(yyscanner ) )
					{
					/* Note: because we've taken care in
					 * yy_get_next_buffer() to have set up
					 * yytext, we can now set up
					 * yy_c_buf_p so that if some total
					 * hoser (like flex itself) wants to
					 * call the scanner after we return the
					 * YY_NULL, it'll still work - another
					 * YY_NULL will get returned.
					 */
					yyg->yy_c_buf_p = yyg->yytext_ptr + YY_MORE_ADJ;

					yy_act = YY_STATE_EOF(YY_START);
					goto do_action;
					}

				else
					{
					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
					}
				break;
				}

			case EOB_ACT_CONTINUE_SCAN:
				yyg->yy_c_buf_p =
					yyg->yytext_ptr + yy_amount_of_matched_text;

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_match;

			case EOB_ACT_LAST_MATCH:
				yyg->yy_c_buf_p =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars];

				yy_current_state = yy_get_previous_state( yyscanner );

				yy_cp = yyg->yy_c_buf_p;
				yy_bp = yyg->yytext_ptr + YY_MORE_ADJ;
				goto yy_find_action;
			}
		break;
		}

	default:
		YY_FATAL_ERROR(
			"fatal flex scanner internal error--no action found" );
	} /* end of action switch */
		} /* end of scanning one token */
	} /* end of user's declarations */
} /* end of gra_lex */

/* yy_get_next_buffer - try to read in a new buffer
 *
 * Returns a code representing an action:
 *	EOB_ACT_LAST_MATCH -
 *	EOB_ACT_CONTINUE_SCAN - continue scanning from current position
 *	EOB_ACT_END_OF_FILE - end of file
 */
static int yy_get_next_buffer (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	register char *dest = YY_CURRENT_BUFFER_LVALUE->yy_ch_buf;
	register char *source = yyg->yytext_ptr;
	register int number_to_move, i;
	int ret_val;

	if ( yyg->yy_c_buf_p > &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] )
		YY_FATAL_ERROR(
		"fatal flex scanner internal error--end of buffer missed" );

	if ( YY_CURRENT_BUFFER_LVALUE->yy_fill_buffer == 0 )
		{ /* Don't try to fill the buffer, so this is an EOF. */
		if ( yyg->yy_c_buf_p - yyg->yytext_ptr - YY_MORE_ADJ == 1 )
			{
			/* We matched a single character, the EOB, so
			 * treat this as a final EOF.
			 */
			return EOB_ACT_END_OF_FILE;
			}

		else
			{
			/* We matched some text prior to the EOB, first
			 * process it.
			 */
			return EOB_ACT_LAST_MATCH;
			}
		}

	/* Try to read more data. */

	/* First move last chars to start of buffer. */
	number_to_move = (int) (yyg->yy_c_buf_p - yyg->yytext_ptr) - 1;

	for ( i = 0; i < number_to_move; ++i )
		*(dest++) = *(source++);

	if ( YY_CURRENT_BUFFER_LVALUE->yy_buffer_status == YY_BUFFER_EOF_PENDING )
		/* don't do the read, it's not guaranteed to return an EOF,
		 * just force an EOF
		 */
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars = 0;

	else
		{
			yy_size_t num_to_read =
			YY_CURRENT_BUFFER_LVALUE->yy_buf_size - number_to_move - 1;

		while ( num_to_read <= 0 )
			{ /* Not enough room in the buffer - grow it. */

			/* just a shorter name for the current buffer */
			YY_BUFFER_STATE b = YY_CURRENT_BUFFER_LVALUE;

			int yy_c_buf_p_offset =
				(int) (yyg->yy_c_buf_p - b->yy_ch_buf);

			if ( b->yy_is_our_buffer )
				{
				yy_size_t new_size = b->yy_buf_size * 2;

				if ( new_size <= 0 )
					b->yy_buf_size += b->yy_buf_size / 8;
				else
					b->yy_buf_size *= 2;

				b->yy_ch_buf = (char *)
					/* Include room in for 2 EOB chars. */
					gra_realloc((void *) b->yy_ch_buf,b->yy_buf_size + 2 ,yyscanner );
				}
			else
				/* Can't grow it, we don't own it. */
				b->yy_ch_buf = 0;

			if ( ! b->yy_ch_buf )
				YY_FATAL_ERROR(
				"fatal error - scanner input buffer overflow" );

			yyg->yy_c_buf_p = &b->yy_ch_buf[yy_c_buf_p_offset];

			num_to_read = YY_CURRENT_BUFFER_LVALUE->yy_buf_size -
						number_to_move - 1;

			}

		if ( num_to_read > YY_READ_BUF_SIZE )
			num_to_read = YY_READ_BUF_SIZE;

		/* Read in more data. */
		YY_INPUT( (&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move]),
			yyg->yy_n_chars, num_to_read );

		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	if ( yyg->yy_n_chars == 0 )
		{
		if ( number_to_move == YY_MORE_ADJ )
			{
			ret_val = EOB_ACT_END_OF_FILE;
			gra_restart(yyin  ,yyscanner);
			}

		else
			{
			ret_val = EOB_ACT_LAST_MATCH;
			YY_CURRENT_BUFFER_LVALUE->yy_buffer_status =
				YY_BUFFER_EOF_PENDING;
			}
		}

	else
		ret_val = EOB_ACT_CONTINUE_SCAN;

	if ((yy_size_t) (yyg->yy_n_chars + number_to_move) > YY_CURRENT_BUFFER_LVALUE->yy_buf_size) {
		/* Extend the array by 50%, plus the number we really need. */
		yy_size_t new_size = yyg->yy_n_chars + number_to_move + (yyg->yy_n_chars >> 1);
		YY_CURRENT_BUFFER_LVALUE->yy_ch_buf = (char *) gra_realloc((void *) YY_CURRENT_BUFFER_LVALUE->yy_ch_buf,new_size ,yyscanner );
		if ( ! YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			YY_FATAL_ERROR( "out of dynamic memory in yy_get_next_buffer()" );
	}

	yyg->yy_n_chars += number_to_move;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] = YY_END_OF_BUFFER_CHAR;
	YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars + 1] = YY_END_OF_BUFFER_CHAR;

	yyg->yytext_ptr = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[0];

	return ret_val;
}

/* yy_get_previous_state - get the state just before the EOB char was reached */

    static yy_state_type yy_get_previous_state (yyscan_t yyscanner)
{
	register yy_state_type yy_current_state;
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	yy_current_state = yyg->yy_start;

	for ( yy_cp = yyg->yytext_ptr + YY_MORE_ADJ; yy_cp < yyg->yy_c_buf_p; ++yy_cp )
		{
		register YY_CHAR yy_c = (*yy_cp ? yy_ec[YY_SC_TO_UI(*yy_cp)] : 1);
		if ( yy_accept[yy_current_state] )
			{
			yyg->yy_last_accepting_state = yy_current_state;
			yyg->yy_last_accepting_cpos = yy_cp;
			}
		while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
			{
			yy_current_state = (int) yy_def[yy_current_state];
			if ( yy_current_state >= 203 )
				yy_c = yy_meta[(unsigned int) yy_c];
			}
		yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
		}

	return yy_current_state;
}

/* yy_try_NUL_trans - try to make a transition on the NUL character
 *
 * synopsis
 *	next_state = yy_try_NUL_trans( current_state );
 */
    static yy_state_type yy_try_NUL_trans  (yy_state_type yy_current_state , yyscan_t yyscanner)
{
	register int yy_is_jam;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner; /* This var may be unused depending upon options. */
	register char *yy_cp = yyg->yy_c_buf_p;

	register YY_CHAR yy_c = 1;
	if ( yy_accept[yy_current_state] )
		{
		yyg->yy_last_accepting_state = yy_current_state;
		yyg->yy_last_accepting_cpos = yy_cp;
		}
	while ( yy_chk[yy_base[yy_current_state] + yy_c] != yy_current_state )
		{
		yy_current_state = (int) yy_def[yy_current_state];
		if ( yy_current_state >= 203 )
			yy_c = yy_meta[(unsigned int) yy_c];
		}
	yy_current_state = yy_nxt[yy_base[yy_current_state] + (unsigned int) yy_c];
	yy_is_jam = (yy_current_state == 202);

	(void)yyg;
	return yy_is_jam ? 0 : yy_current_state;
}

    static void yyunput (int c, register char * yy_bp , yyscan_t yyscanner)
{
	register char *yy_cp;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    yy_cp = yyg->yy_c_buf_p;

	/* undo effects of setting up yytext */
	*yy_cp = yyg->yy_hold_char;

	if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
		{ /* need to shift things up to make room */
		/* +2 for EOB chars. */
		register yy_size_t number_to_move = yyg->yy_n_chars + 2;
		register char *dest = &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[
					YY_CURRENT_BUFFER_LVALUE->yy_buf_size + 2];
		register char *source =
				&YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[number_to_move];

		while ( source > YY_CURRENT_BUFFER_LVALUE->yy_ch_buf )
			*--dest = *--source;

		yy_cp += (int) (dest - source);
		yy_bp += (int) (dest - source);
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars =
			yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_buf_size;

		if ( yy_cp < YY_CURRENT_BUFFER_LVALUE->yy_ch_buf + 2 )
			YY_FATAL_ERROR( "flex scanner push-back overflow" );
		}

	*--yy_cp = (char) c;

    if ( c == '\n' ){
        --yylineno;
    }

	yyg->yytext_ptr = yy_bp;
	yyg->yy_hold_char = *yy_cp;
	yyg->yy_c_buf_p = yy_cp;
}

#ifndef YY_NO_INPUT
#ifdef __cplusplus
    static int yyinput (yyscan_t yyscanner)
#else
    static int input  (yyscan_t yyscanner)
#endif

{
	int c;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	*yyg->yy_c_buf_p = yyg->yy_hold_char;

	if ( *yyg->yy_c_buf_p == YY_END_OF_BUFFER_CHAR )
		{
		/* yy_c_buf_p now points to the character we want to return.
		 * If this occurs *before* the EOB characters, then it's a
		 * valid NUL; if not, then we've hit the end of the buffer.
		 */
		if ( yyg->yy_c_buf_p < &YY_CURRENT_BUFFER_LVALUE->yy_ch_buf[yyg->yy_n_chars] )
			/* This was really a NUL. */
			*yyg->yy_c_buf_p = '\0';

		else
			{ /* need more input */
			yy_size_t offset = yyg->yy_c_buf_p - yyg->yytext_ptr;
			++yyg->yy_c_buf_p;

			switch ( yy_get_next_buffer( yyscanner ) )
				{
				case EOB_ACT_LAST_MATCH:
					/* This happens because yy_g_n_b()
					 * sees that we've accumulated a
					 * token and flags that we need to
					 * try matching the token before
					 * proceeding.  But for input(),
					 * there's no matching to consider.
					 * So convert the EOB_ACT_LAST_MATCH
					 * to EOB_ACT_END_OF_FILE.
					 */

					/* Reset buffer status. */
					gra_restart(yyin ,yyscanner);

					/*FALLTHROUGH*/

				case EOB_ACT_END_OF_FILE:
					{
					if ( gra_wrap(yyscanner ) )
						return EOF;

					if ( ! yyg->yy_did_buffer_switch_on_eof )
						YY_NEW_FILE;
#ifdef __cplusplus
					return yyinput(yyscanner);
#else
					return input(yyscanner);
#endif
					}

				case EOB_ACT_CONTINUE_SCAN:
					yyg->yy_c_buf_p = yyg->yytext_ptr + offset;
					break;
				}
			}
		}

	c = *(unsigned char *) yyg->yy_c_buf_p;	/* cast for 8-bit char's */
	*yyg->yy_c_buf_p = '\0';	/* preserve yytext */
	yyg->yy_hold_char = *++yyg->yy_c_buf_p;

	if ( c == '\n' )
		   
    do{ yylineno++;
        yycolumn=0;
    }while(0)
;

	return c;
}
#endif	/* ifndef YY_NO_INPUT */

/** Immediately switch to a different input stream.
 * @param input_file A readable stream.
 * @param yyscanner The scanner object.
 * @note This function does not reset the start condition to @c INITIAL .
 */
    void gra_restart  (FILE * input_file , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! YY_CURRENT_BUFFER ){
        gra_ensure_buffer_stack (yyscanner);
		YY_CURRENT_BUFFER_LVALUE =
            gra__create_buffer(yyin,YY_BUF_SIZE ,yyscanner);
	}

	gra__init_buffer(YY_CURRENT_BUFFER,input_file ,yyscanner);
	gra__load_buffer_state(yyscanner );
}

/** Switch to a different input buffer.
 * @param new_buffer The new input buffer.
 * @param yyscanner The scanner object.
 */
    void gra__switch_to_buffer  (YY_BUFFER_STATE  new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	/* TODO. We should be able to replace this entire function body
	 * with
	 *		gra_pop_buffer_state();
	 *		gra_push_buffer_state(new_buffer);
     */
	gra_ensure_buffer_stack (yyscanner);
	if ( YY_CURRENT_BUFFER == new_buffer )
		return;

	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	YY_CURRENT_BUFFER_LVALUE = new_buffer;
	gra__load_buffer_state(yyscanner );

	/* We don't actually know whether we did this switch during
	 * EOF (gra_wrap()) processing, but the only time this flag
	 * is looked at is after gra_wrap() is called, so it's safe
	 * to go ahead and always set it.
	 */
	yyg->yy_did_buffer_switch_on_eof = 1;
}

static void gra__load_buffer_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	yyg->yy_n_chars = YY_CURRENT_BUFFER_LVALUE->yy_n_chars;
	yyg->yytext_ptr = yyg->yy_c_buf_p = YY_CURRENT_BUFFER_LVALUE->yy_buf_pos;
	yyin = YY_CURRENT_BUFFER_LVALUE->yy_input_file;
	yyg->yy_hold_char = *yyg->yy_c_buf_p;
}

/** Allocate and initialize an input buffer state.
 * @param file A readable stream.
 * @param size The character buffer size in bytes. When in doubt, use @c YY_BUF_SIZE.
 * @param yyscanner The scanner object.
 * @return the allocated buffer state.
 */
    YY_BUFFER_STATE gra__create_buffer  (FILE * file, int  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	b = (YY_BUFFER_STATE) gra_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in gra__create_buffer()" );

	b->yy_buf_size = size;

	/* yy_ch_buf has to be 2 characters longer than the size given because
	 * we need to put in 2 end-of-buffer characters.
	 */
	b->yy_ch_buf = (char *) gra_alloc(b->yy_buf_size + 2 ,yyscanner );
	if ( ! b->yy_ch_buf )
		YY_FATAL_ERROR( "out of dynamic memory in gra__create_buffer()" );

	b->yy_is_our_buffer = 1;

	gra__init_buffer(b,file ,yyscanner);

	return b;
}

/** Destroy the buffer.
 * @param b a buffer created with gra__create_buffer()
 * @param yyscanner The scanner object.
 */
    void gra__delete_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if ( ! b )
		return;

	if ( b == YY_CURRENT_BUFFER ) /* Not sure if we should pop here. */
		YY_CURRENT_BUFFER_LVALUE = (YY_BUFFER_STATE) 0;

	if ( b->yy_is_our_buffer )
		gra_free((void *) b->yy_ch_buf ,yyscanner );

	gra_free((void *) b ,yyscanner );
}

/* Initializes or reinitializes a buffer.
 * This function is sometimes called more than once on the same buffer,
 * such as during a gra_restart() or at EOF.
 */
    static void gra__init_buffer  (YY_BUFFER_STATE  b, FILE * file , yyscan_t yyscanner)

{
	int oerrno = errno;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	gra__flush_buffer(b ,yyscanner);

	b->yy_input_file = file;
	b->yy_fill_buffer = 1;

    /* If b is the current buffer, then gra__init_buffer was _probably_
     * called from gra_restart() or through yy_get_next_buffer.
     * In that case, we don't want to reset the lineno or column.
     */
    if (b != YY_CURRENT_BUFFER){
        b->yy_bs_lineno = 1;
        b->yy_bs_column = 0;
    }

        b->yy_is_interactive = 0;
    
	errno = oerrno;
}

/** Discard all buffered characters. On the next scan, YY_INPUT will be called.
 * @param b the buffer state to be flushed, usually @c YY_CURRENT_BUFFER.
 * @param yyscanner The scanner object.
 */
    void gra__flush_buffer (YY_BUFFER_STATE  b , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( ! b )
		return;

	b->yy_n_chars = 0;

	/* We always need two end-of-buffer characters.  The first causes
	 * a transition to the end-of-buffer state.  The second causes
	 * a jam in that state.
	 */
	b->yy_ch_buf[0] = YY_END_OF_BUFFER_CHAR;
	b->yy_ch_buf[1] = YY_END_OF_BUFFER_CHAR;

	b->yy_buf_pos = &b->yy_ch_buf[0];

	b->yy_at_bol = 1;
	b->yy_buffer_status = YY_BUFFER_NEW;

	if ( b == YY_CURRENT_BUFFER )
		gra__load_buffer_state(yyscanner );
}

/** Pushes the new state onto the stack. The new state becomes
 *  the current state. This function will allocate the stack
 *  if necessary.
 *  @param new_buffer The new state.
 *  @param yyscanner The scanner object.
 */
void gra_push_buffer_state (YY_BUFFER_STATE new_buffer , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (new_buffer == NULL)
		return;

	gra_ensure_buffer_stack(yyscanner);

	/* This block is copied from gra__switch_to_buffer. */
	if ( YY_CURRENT_BUFFER )
		{
		/* Flush out information for old buffer. */
		*yyg->yy_c_buf_p = yyg->yy_hold_char;
		YY_CURRENT_BUFFER_LVALUE->yy_buf_pos = yyg->yy_c_buf_p;
		YY_CURRENT_BUFFER_LVALUE->yy_n_chars = yyg->yy_n_chars;
		}

	/* Only push if top exists. Otherwise, replace top. */
	if (YY_CURRENT_BUFFER)
		yyg->yy_buffer_stack_top++;
	YY_CURRENT_BUFFER_LVALUE = new_buffer;

	/* copied from gra__switch_to_buffer. */
	gra__load_buffer_state(yyscanner );
	yyg->yy_did_buffer_switch_on_eof = 1;
}

/** Removes and deletes the top of the stack, if present.
 *  The next element becomes the new top.
 *  @param yyscanner The scanner object.
 */
void gra_pop_buffer_state (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if (!YY_CURRENT_BUFFER)
		return;

	gra__delete_buffer(YY_CURRENT_BUFFER ,yyscanner);
	YY_CURRENT_BUFFER_LVALUE = NULL;
	if (yyg->yy_buffer_stack_top > 0)
		--yyg->yy_buffer_stack_top;

	if (YY_CURRENT_BUFFER) {
		gra__load_buffer_state(yyscanner );
		yyg->yy_did_buffer_switch_on_eof = 1;
	}
}

/* Allocates the stack if it does not exist.
 *  Guarantees space for at least one push.
 */
static void gra_ensure_buffer_stack (yyscan_t yyscanner)
{
	yy_size_t num_to_alloc;
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

	if (!yyg->yy_buffer_stack) {

		/* First allocation is just for 2 elements, since we don't know if this
		 * scanner will even need a stack. We use 2 instead of 1 to avoid an
		 * immediate realloc on the next call.
         */
		num_to_alloc = 1;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)gra_alloc
								(num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in gra_ensure_buffer_stack()" );
								  
		memset(yyg->yy_buffer_stack, 0, num_to_alloc * sizeof(struct yy_buffer_state*));
				
		yyg->yy_buffer_stack_max = num_to_alloc;
		yyg->yy_buffer_stack_top = 0;
		return;
	}

	if (yyg->yy_buffer_stack_top >= (yyg->yy_buffer_stack_max) - 1){

		/* Increase the buffer to prepare for a possible push. */
		int grow_size = 8 /* arbitrary grow size */;

		num_to_alloc = yyg->yy_buffer_stack_max + grow_size;
		yyg->yy_buffer_stack = (struct yy_buffer_state**)gra_realloc
								(yyg->yy_buffer_stack,
								num_to_alloc * sizeof(struct yy_buffer_state*)
								, yyscanner);
		if ( ! yyg->yy_buffer_stack )
			YY_FATAL_ERROR( "out of dynamic memory in gra_ensure_buffer_stack()" );

		/* zero only the new slots.*/
		memset(yyg->yy_buffer_stack + yyg->yy_buffer_stack_max, 0, grow_size * sizeof(struct yy_buffer_state*));
		yyg->yy_buffer_stack_max = num_to_alloc;
	}
}

/** Setup the input buffer state to scan directly from a user-specified character buffer.
 * @param base the character buffer
 * @param size the size in bytes of the character buffer
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object. 
 */
YY_BUFFER_STATE gra__scan_buffer  (char * base, yy_size_t  size , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
    
	if ( size < 2 ||
	     base[size-2] != YY_END_OF_BUFFER_CHAR ||
	     base[size-1] != YY_END_OF_BUFFER_CHAR )
		/* They forgot to leave room for the EOB's. */
		return 0;

	b = (YY_BUFFER_STATE) gra_alloc(sizeof( struct yy_buffer_state ) ,yyscanner );
	if ( ! b )
		YY_FATAL_ERROR( "out of dynamic memory in gra__scan_buffer()" );

	b->yy_buf_size = size - 2;	/* "- 2" to take care of EOB's */
	b->yy_buf_pos = b->yy_ch_buf = base;
	b->yy_is_our_buffer = 0;
	b->yy_input_file = 0;
	b->yy_n_chars = b->yy_buf_size;
	b->yy_is_interactive = 0;
	b->yy_at_bol = 1;
	b->yy_fill_buffer = 0;
	b->yy_buffer_status = YY_BUFFER_NEW;

	gra__switch_to_buffer(b ,yyscanner );

	return b;
}

/** Setup the input buffer state to scan a string. The next call to gra_lex() will
 * scan from a @e copy of @a str.
 * @param yystr a NUL-terminated string to scan
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 * @note If you want to scan bytes that may contain NUL values, then use
 *       gra__scan_bytes() instead.
 */
YY_BUFFER_STATE gra__scan_string (yyconst char * yystr , yyscan_t yyscanner)
{
    
	return gra__scan_bytes(yystr,strlen(yystr) ,yyscanner);
}

/** Setup the input buffer state to scan the given bytes. The next call to gra_lex() will
 * scan from a @e copy of @a bytes.
 * @param yybytes the byte buffer to scan
 * @param _yybytes_len the number of bytes in the buffer pointed to by @a bytes.
 * @param yyscanner The scanner object.
 * @return the newly allocated buffer state object.
 */
YY_BUFFER_STATE gra__scan_bytes  (yyconst char * yybytes, yy_size_t  _yybytes_len , yyscan_t yyscanner)
{
	YY_BUFFER_STATE b;
	char *buf;
	yy_size_t n;
	yy_size_t i;
    
	/* Get memory for full buffer, including space for trailing EOB's. */
	n = _yybytes_len + 2;
	buf = (char *) gra_alloc(n ,yyscanner );
	if ( ! buf )
		YY_FATAL_ERROR( "out of dynamic memory in gra__scan_bytes()" );

	for ( i = 0; i < _yybytes_len; ++i )
		buf[i] = yybytes[i];

	buf[_yybytes_len] = buf[_yybytes_len+1] = YY_END_OF_BUFFER_CHAR;

	b = gra__scan_buffer(buf,n ,yyscanner);
	if ( ! b )
		YY_FATAL_ERROR( "bad buffer in gra__scan_bytes()" );

	/* It's okay to grow etc. this buffer, and we should throw it
	 * away when we're done.
	 */
	b->yy_is_our_buffer = 1;

	return b;
}

    static void yy_push_state (int  new_state , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( yyg->yy_start_stack_ptr >= yyg->yy_start_stack_depth )
		{
		yy_size_t new_size;

		yyg->yy_start_stack_depth += YY_START_STACK_INCR;
		new_size = yyg->yy_start_stack_depth * sizeof( int );

		if ( ! yyg->yy_start_stack )
			yyg->yy_start_stack = (int *) gra_alloc(new_size ,yyscanner );

		else
			yyg->yy_start_stack = (int *) gra_realloc((void *) yyg->yy_start_stack,new_size ,yyscanner );

		if ( ! yyg->yy_start_stack )
			YY_FATAL_ERROR( "out of memory expanding start-condition stack" );
		}

	yyg->yy_start_stack[yyg->yy_start_stack_ptr++] = YY_START;

	BEGIN(new_state);
}

    static void yy_pop_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	if ( --yyg->yy_start_stack_ptr < 0 )
		YY_FATAL_ERROR( "start-condition stack underflow" );

	BEGIN(yyg->yy_start_stack[yyg->yy_start_stack_ptr]);
}

    static int yy_top_state  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
	return yyg->yy_start_stack[yyg->yy_start_stack_ptr - 1];
}

#ifndef YY_EXIT_FAILURE
#define YY_EXIT_FAILURE 2
#endif

static void yy_fatal_error (yyconst char* msg , yyscan_t yyscanner)
{
    	(void) fprintf( stderr, "%s\n", msg );
	exit( YY_EXIT_FAILURE );
}

/* Redefine yyless() so it works in section 3 code. */

#undef yyless
#define yyless(n) \
	do \
		{ \
		/* Undo effects of setting up yytext. */ \
        int yyless_macro_arg = (n); \
        YY_LESS_LINENO(yyless_macro_arg);\
		yytext[yyleng] = yyg->yy_hold_char; \
		yyg->yy_c_buf_p = yytext + yyless_macro_arg; \
		yyg->yy_hold_char = *yyg->yy_c_buf_p; \
		*yyg->yy_c_buf_p = '\0'; \
		yyleng = yyless_macro_arg; \
		} \
	while ( 0 )

/* Accessor  methods (get/set functions) to struct members. */

/** Get the user-defined data for this scanner.
 * @param yyscanner The scanner object.
 */
YY_EXTRA_TYPE gra_get_extra  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyextra;
}

/** Get the current line number.
 * @param yyscanner The scanner object.
 */
int gra_get_lineno  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yylineno;
}

/** Get the current column number.
 * @param yyscanner The scanner object.
 */
int gra_get_column  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    
        if (! YY_CURRENT_BUFFER)
            return 0;
    
    return yycolumn;
}

/** Get the input stream.
 * @param yyscanner The scanner object.
 */
FILE *gra_get_in  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyin;
}

/** Get the output stream.
 * @param yyscanner The scanner object.
 */
FILE *gra_get_out  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyout;
}

/** Get the length of the current token.
 * @param yyscanner The scanner object.
 */
yy_size_t gra_get_leng  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yyleng;
}

/** Get the current token.
 * @param yyscanner The scanner object.
 */

char *gra_get_text  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yytext;
}

/** Set the user-defined data. This data is never touched by the scanner.
 * @param user_defined The data to be associated with this scanner.
 * @param yyscanner The scanner object.
 */
void gra_set_extra (YY_EXTRA_TYPE  user_defined , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyextra = user_defined ;
}

/** Set the current line number.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void gra_set_lineno (int  line_number , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* lineno is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "gra_set_lineno called with no buffer" );
    
    yylineno = line_number;
}

/** Set the current column.
 * @param line_number
 * @param yyscanner The scanner object.
 */
void gra_set_column (int  column_no , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

        /* column is only valid if an input buffer exists. */
        if (! YY_CURRENT_BUFFER )
           YY_FATAL_ERROR( "gra_set_column called with no buffer" );
    
    yycolumn = column_no;
}

/** Set the input stream. This does not discard the current
 * input buffer.
 * @param in_str A readable stream.
 * @param yyscanner The scanner object.
 * @see gra__switch_to_buffer
 */
void gra_set_in (FILE *  in_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyin = in_str ;
}

void gra_set_out (FILE *  out_str , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yyout = out_str ;
}

int gra_get_debug  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yy_flex_debug;
}

void gra_set_debug (int  bdebug , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yy_flex_debug = bdebug ;
}

/* Accessor methods for yylval and yylloc */

YYSTYPE * gra_get_lval  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylval;
}

void gra_set_lval (YYSTYPE *  yylval_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylval = yylval_param;
}

YYLTYPE *gra_get_lloc  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    return yylloc;
}
    
void gra_set_lloc (YYLTYPE *  yylloc_param , yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    yylloc = yylloc_param;
}
    
/* User-visible API */

/* gra_lex_init is special because it creates the scanner itself, so it is
 * the ONLY reentrant function that doesn't take the scanner as the last argument.
 * That's why we explicitly handle the declaration, instead of using our macros.
 */

int gra_lex_init(yyscan_t* ptr_yy_globals)

{
    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }

    *ptr_yy_globals = (yyscan_t) gra_alloc ( sizeof( struct yyguts_t ), NULL );

    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }

    /* By setting to 0xAA, we expose bugs in yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));

    return yy_init_globals ( *ptr_yy_globals );
}

/* gra_lex_init_extra has the same functionality as gra_lex_init, but follows the
 * convention of taking the scanner as the last argument. Note however, that
 * this is a *pointer* to a scanner, as it will be allocated by this call (and
 * is the reason, too, why this function also must handle its own declaration).
 * The user defined value in the first argument will be available to gra_alloc in
 * the yyextra field.
 */

int gra_lex_init_extra(YY_EXTRA_TYPE yy_user_defined,yyscan_t* ptr_yy_globals )

{
    struct yyguts_t dummy_yyguts;

    gra_set_extra (yy_user_defined, &dummy_yyguts);

    if (ptr_yy_globals == NULL){
        errno = EINVAL;
        return 1;
    }
	
    *ptr_yy_globals = (yyscan_t) gra_alloc ( sizeof( struct yyguts_t ), &dummy_yyguts );
	
    if (*ptr_yy_globals == NULL){
        errno = ENOMEM;
        return 1;
    }
    
    /* By setting to 0xAA, we expose bugs in
    yy_init_globals. Leave at 0x00 for releases. */
    memset(*ptr_yy_globals,0x00,sizeof(struct yyguts_t));
    
    gra_set_extra (yy_user_defined, *ptr_yy_globals);
    
    return yy_init_globals ( *ptr_yy_globals );
}

static int yy_init_globals (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;
    /* Initialization is the same as for the non-reentrant scanner.
     * This function is called from gra_lex_destroy(), so don't allocate here.
     */

    yyg->yy_buffer_stack = 0;
    yyg->yy_buffer_stack_top = 0;
    yyg->yy_buffer_stack_max = 0;
    yyg->yy_c_buf_p = (char *) 0;
    yyg->yy_init = 0;
    yyg->yy_start = 0;

    yyg->yy_start_stack_ptr = 0;
    yyg->yy_start_stack_depth = 0;
    yyg->yy_start_stack =  NULL;

/* Defined in main.c */
#ifdef YY_STDINIT
    yyin = stdin;
    yyout = stdout;
#else
    yyin = (FILE *) 0;
    yyout = (FILE *) 0;
#endif

    /* For future reference: Set errno on error, since we are called by
     * gra_lex_init()
     */
    return 0;
}

/* gra_lex_destroy is for both reentrant and non-reentrant scanners. */
int gra_lex_destroy  (yyscan_t yyscanner)
{
    struct yyguts_t * yyg = (struct yyguts_t*)yyscanner;

    /* Pop the buffer stack, destroying each element. */
	while(YY_CURRENT_BUFFER){
		gra__delete_buffer(YY_CURRENT_BUFFER ,yyscanner );
		YY_CURRENT_BUFFER_LVALUE = NULL;
		gra_pop_buffer_state(yyscanner);
	}

	/* Destroy the stack itself. */
	gra_free(yyg->yy_buffer_stack ,yyscanner);
	yyg->yy_buffer_stack = NULL;

    /* Destroy the start condition stack. */
        gra_free(yyg->yy_start_stack ,yyscanner );
        yyg->yy_start_stack = NULL;

    /* Reset the globals. This is important in a non-reentrant scanner so the next time
     * gra_lex() is called, initialization will occur. */
    yy_init_globals( yyscanner);

    /* Destroy the main struct (reentrant only). */
    gra_free ( yyscanner , yyscanner );
    yyscanner = NULL;
    return 0;
}

/*
 * Internal utility routines.
 */

#ifndef yytext_ptr
static void yy_flex_strncpy (char* s1, yyconst char * s2, int n , yyscan_t yyscanner)
{
	register int i;
	for ( i = 0; i < n; ++i )
		s1[i] = s2[i];
}
#endif

#ifdef YY_NEED_STRLEN
static int yy_flex_strlen (yyconst char * s , yyscan_t yyscanner)
{
	register int n;
	for ( n = 0; s[n]; ++n )
		;

	return n;
}
#endif

void *gra_alloc (yy_size_t  size , yyscan_t yyscanner)
{
	return (void *) malloc( size );
}

void *gra_realloc  (void * ptr, yy_size_t  size , yyscan_t yyscanner)
{
	/* The cast to (char *) in the following accommodates both
	 * implementations that use char* generic pointers, and those
	 * that use void* generic pointers.  It works with the latter
	 * because both ANSI C and C++ allow castless assignment from
	 * any pointer type to void*, and deal with argument conversions
	 * as though doing an assignment.
	 */
	return (void *) realloc( (char *) ptr, size );
}

void gra_free (void * ptr , yyscan_t yyscanner)
{
	free( (char *) ptr );	/* see gra_realloc() for (char *) cast */
}

#define YYTABLES_NAME "yytables"

#line 271 "lexer.lex"



int parse_hex_int(char* str) {
    return static_cast<int>(strtol(str, nullptr, 0));
}

void gorc::cog::grammar::instance::init_scanner()
{
    gra_lex_init(&scanner);
    gra_set_extra(this,scanner);
}

void gorc::cog::grammar::instance::destroy_scanner()
{
    gra_lex_destroy(scanner);
}


